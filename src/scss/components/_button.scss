/* stylelint-disable-next-line scss/no-global-function-names */
$shadow-state: 0 5px 14px transparentize(color("primary"), 0.86);

.btn {
	padding: 1.6rem 4rem;
	border-radius: 20px;
	display: inline-flex;
    align-items: center;
    column-gap: 0.6rem;
    white-space: nowrap;
	color: color("support-light-1");
	background: linear-gradient(266.57deg, color("primaryDark"), color("primary"));
	@include breakpoint(sm) {
		border-radius: 15px;
		padding: 1.4rem 3rem;
	}

//  @include state(states, property, transition);

/*
    states = first arg (SASS map)

    Map containing the default keys (states): "default", "hover" and "active". These keys receive other maps containing each property and value corresponding to the state.

    Properties specified in "default" will be used to define the transitions.
*/
    @include state((
		default: (
			opacity: 1,
			box-shadow: initial
		),
		hover: (
			opacity: 0.8,
			box-shadow: $shadow-state
		),
		active: (
			opacity: 0.6,
			box-shadow: $shadow-state
		)
	));

/*
    property = second arg (CSS property)

    If you are going to modify the state of just one property, pass values instead of maps in the default keys (default, hover, and active).

    The values as well as the transitions will be used in the property specified in the second argument of the mixin.
*/
    @include state((
        default: color("supportLight2"),
        active: color("primaryDark")
    ), color);

/*
    property = second arg (fill or stroke)
    standard value: null
    
    Passing the "fill" or "stroke" property to the second argument causes the styles to be applied to the "path" selector automatically.

    You can normally use it in conjunction with another instance of "@include mixin", as the transitions will be applied to the "path" selector and will not overwrite the previous ones.

    Use this shape to modify SVG states.
*/
    @include state((
        default: color("supportLight2"),
        hover: color("secondary"),
        active: color("primaryDark")
    ), fill);

/*
    property = third argument (keyname set to global map $transitions)
    default value: button

    By default, transitions are defined using the "button" key settings of the "$transition" map.

    Create another key in this map and mention it in the third argument of the mixin to use. If you're not using the second argument, set "null" to it, like this:

    @include state((
        default: ...,
        hover: ...
        active: ...
    ), null, global);
*/

// transition added to all properties as multiple instances of "@include state" override transitions
    @include transition("button", all);
}
